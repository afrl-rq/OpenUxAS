-- waypoint-manager.lus

include "../common/types.lus"
include "../common/pltl.lus"
include "../common/route-utils.lus"


-- This constant represents a skolemized universally quantified variable
-- that we use to link details of a message appearing in the past with details
-- of our output message.
const  wm_future_out_msg : message;


contract wm_contract(
    -- The message currently received by the service
    in_msg : message;

    -- The ID to be used for ID generation
    in_id : id_type;

    -- True if the service is permitted to send a message.
    can_send_message : bool;
) returns (
    -- The message currently sent by the service
    out_msg : message;
);
let
    guarantee "Waypoint Manager R1. IC.
      The Waypoint Manager initial condition is to send no message.\n  "
    (
        O(out_msg = no_message)
    );

    guarantee "Waypoint Manager R2. Respects bus access.
      The Waypoint Manager does not send a message when instructed not to.\n  "
    (
        not can_send_message
    ) => (
        out_msg = no_message
    );

    guarantee "Waypoint Manager R3. Message IDs.
      The Waypoint Manager correctly computes output message IDs.\n  "
    (
        out_msg <> no_message
    ) => (
        out_msg.id = in_id + 1
    );

    guarantee "Waypoint Manager R4. Possible responses.
      The Waypoint Manager responds only with specific messages.\n  "
    (
        out_msg.kind = mission_command xor
        out_msg      = no_message
    );

    guarantee "Waypoint Manager R5.
      When the Waypoint Manager sends a Mission Command message, the waypoint
      sent is contained in the route that belongs to the previously received
      Automation Response message that is referenced in the Mission Command
      message.\n  "
    (
        out_msg.kind = mission_command and
        out_msg      = wm_future_out_msg
    ) => (
        O(in_msg.kind = automation_response and
          in_msg.id   = wm_future_out_msg.ref and
          contains(in_msg.route, wm_future_out_msg.waypoint))
    );
tel;


--
-- The Waypoint Manager Service
--
node waypoint_manager(
    -- The message currently received by the service
    in_msg : message;

    -- The ID to be used for ID generation
    in_id : id_type;

    -- True if the service is permitted to send a message.
    can_send_message : bool;
) returns (
    -- The message currently sent by the service
    out_msg : message;
);
(*@contract
    import wm_contract(in_msg, in_id, can_send_message) returns (out_msg);
*)
var
    -- ===================================================================== --
    -- Service state
    --
    -- The route from which this service will stream waypoints
    route : route_type;

    -- The ID of the message that provided the route above
    route_msg_id : id_type;

    -- The waypoint to send
    waypoint : waypoint_type;
let
    -- ===================================================================== --
    -- Service Behavior

    -- These expressions serve as high-level specifications of service
    -- behavior. Each is preceded by a natural-language description of the
    -- specification, set off in quotes for clarity.

    -- "If there is a stored route, the service shall get the next waypoint
    --  from the route."
    --
    -- Note that this happens "before" we determine if there is a new route.
    -- waypoint = if pre_route <> no_route then
    --                next_waypoint(pre_route)
    --            else
    --                no_waypoint;
    waypoint = next_waypoint(no_route -> pre(route));


    -- "If there is a next waypoint, the service shall send the next waypoint
    --  in a Mission Command message that references the ID of the Automation
    --  Response message that provided the stored route."
    --
    -- Note two things:
    --  1. this happens "before" we determine if there is a new route that we
    --     we should store and from which we should start streaming waypoints.
    --     So the service will wait one time step before responding to a new
    --     route.
    --
    --  2. we don't update the waypoint_in_msg_id state variable until "after"
    --     we have determined if there's a new route (so that we can use the ID
    --     of the message setting the route to reset the waypoint_in_msg_id).
    --     Thus we manually increment the previous waypoint_in_msg_id here in
    --     building the message.
    out_msg =   if waypoint <> no_waypoint and can_send_message then
                    message {
                        kind     = mission_command;
                        id       = in_id + 1;
                        ref      = no_id -> pre(route_msg_id);
                        route    = no_route -> pre(route);
                        waypoint = waypoint;
                        }
                else
                    no_message;


    -- "If the service receives an Automation Response message, the service
    --  shall store the route from the Automation Response message. Otherwise,
    --  if there is no next waypoint, the service shall clear the stored
    --  route."
    route = if in_msg.kind = automation_response and
               nonempty_sequence(in_msg.route)
            then
                in_msg.route
            else if waypoint <> no_waypoint then
                no_route -> pre(route)
            else
                no_route;


    -- "If the service receives an Automation Response message, the service
    --  shall store the ID of the Automation Response message."
    route_msg_id =  if in_msg.kind = automation_response and
                       nonempty_sequence(in_msg.route)
                    then
                        in_msg.id
                    else if waypoint <> no_waypoint then
                        no_id -> pre(route_msg_id)
                    else
                        no_id;


    -- ===================================================================== --
    -- Properties of Interest

    check "L1. Lemma for R4.\n  "
    (
        out_msg.kind = mission_command
    ) => (
        contains(out_msg.route, out_msg.waypoint)
    );


    -- This property is a nice sanity check over our output.
    check "P1.
      The Waypoint Manager never sends 'no waypoint' as part of a Mission
      Command.\n  "
    (
        out_msg.kind = mission_command
    ) => (
        out_msg.waypoint <> no_waypoint
    );


    -- This property is a nice sanity check on our stored route.
    check "P2.
      Route is no_route xor a (valid) nonempty route.\n  "
    (
        route = no_route xor nonempty_sequence(route)
    );


    -- This property, which is interesting in its own right, functions as a
    -- lemma for proving our requirement R4.
    check "P3.
      When the Waypoint Manager sends a Mission Command message, the referenced
      Automation Response message was previously received.\n  "
    (
        out_msg.kind = mission_command and
        out_msg      = wm_future_out_msg
    ) => (
        O(in_msg.kind = automation_response and
          in_msg.id   = wm_future_out_msg.ref)
    );


    -- ===================================================================== --
    -- Antecedent Witnesses
    --
    -- These are grouped, rather than placed with their properties, so that
    -- they can easily be enabled / disabled: they tend to pollute the output
    -- when expected-true properties are falsified.

    -- check "L1.A. Witness antecedent of L1."
    -- not (
    --     out_msg.kind = mission_command
    -- );

    -- check "L2.A. Witness antecedent of L2."
    -- not (
    --     out_msg.kind = mission_command
    -- );


    -- check "P1.A. Witness antecedent of P1."
    -- not (
    --     out_msg.kind = mission_command
    -- );

    -- check "P3.A. Witness antecedent of P3."
    -- not (
    --     out_msg.kind = mission_command
    -- );

    -- check "P4.A. Witness antecedent of P4."
    -- not (
    --     out_msg.kind = mission_command and
    --     out_msg      = wm_future_out_msg
    -- );


    -- check "R1.A. Witness antecedent of R1."
    -- not (
    --     out_msg.kind = mission_command and
    --     out_msg      = wm_future_out_msg
    -- );
tel;
