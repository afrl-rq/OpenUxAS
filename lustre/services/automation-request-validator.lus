-- automation-request-validator.lus

include "../common/types.lus"
include "../common/pltl.lus"


-- This constant represents a skolemized universally quantified variable
-- that we use to link details of a message appearing the past with details
-- of our output message in properties.
--
-- Placed here for use in our contract.
const arv_future_out_msg : message;


contract arv_contract(
    -- The message currently received by the service
    in_msg : message;

    -- The ID to be used for ID generation
    in_id : id_type;
) returns (
    -- The message currently sent by the service
    out_msg : message;
);
let
    guarantee "Automation Request Validator R1. Message IDs.
      The Automation Request Validator correctly computes output message
      IDs.\n  "
    (
        out_msg <> no_message
    ) => (
        out_msg.id = in_id + 1
    );

    guarantee "Automation Request Validator R2. Possible responses.
      The Automation Request Validator responds only with specific
      messages.\n  "
    (
        out_msg.kind = automation_response xor
        out_msg      = no_message
    );

    guarantee "Automation Request Validator R3. IC.
      The Automation Request Validator initial condition is to send no
      message.\n  "
    (
        O(out_msg = no_message)
    );

    guarantee "Automation Request Validator R4.
      When the Automation Request Validator sends an Automation Response
      message, the route sent belongs to the previously received Unique
      Automation Response message that is referenced in the Automation Response
      message.\n  "
    (
        out_msg.kind = automation_response and
        out_msg      = arv_future_out_msg
    ) => (
        O(in_msg.kind  = unique_automation_response and
          in_msg.id    = arv_future_out_msg.ref and
          in_msg.route = arv_future_out_msg.route)
    );
tel;


--
-- The Automation Request Validator service
--
node automation_request_validator(
    -- The message currently received by the service
    in_msg : message;

    -- The ID to be used for ID generation
    in_id : id_type;
) returns (
    -- The message currently sent by the service
    out_msg : message;
);
(*@contract import arv_contract(in_msg, in_id) returns (out_msg); *)
var
    -- ===================================================================== --
    -- Service state
    --
    -- The route that this service should pass on
    route : route_type;

    -- The ID of the message that provided the route above
    route_msg_id : id_type;
let
    -- ===================================================================== --
    -- Service Behavior

    -- These expressions serve as high-level specifications of service
    -- behavior. Each is preceded by a natural-language description of the
    -- specification, set off in quotes for clarity.

    -- "If there is a stored route, the service shall send the stored route in
    --  an Automation Response message."
    --
    -- This element of the specification is stated using an assertion rather
    -- than an equation to permit flexibility in the model: the services does
    -- not have to respond with a non-empty message in this step.
    assert(
        out_msg = no_message

        or

        (
            ((no_route -> pre(route)) <> no_route) and
             out_msg =  message {
                            kind     = automation_response;
                            id       = in_id + 1;
                            ref      = no_id -> pre(route_msg_id);
                            route    = no_route -> pre(route);
                            waypoint = no_waypoint;
                        }
        )
    );


    -- "If the service receives a Unique Automation Response message, the
    --  service shall store the route from the Unique Automation Response
    --  message. Otherwise, the service shall clear the stored route."
    route = if in_msg.kind = unique_automation_response then
                in_msg.route
            else
                no_route;


    -- "If the service receives a Unique Automation Response message, the
    --  service shall store the ID of the Unique Automation Response message."
    route_msg_id =  if in_msg.kind = unique_automation_response then
                        in_msg.id
                    else
                        no_id;


    -- ===================================================================== --
    -- Antecedent Witnesses
    --
    -- These are grouped, rather than placed with their properties, so that
    -- they can easily be enabled / disabled: they tend to pollute the output
    -- when expected-true properties are falsified.

    -- check "P1.A. Witness antecedent of P1."
    -- not (
    --     out_msg <> no_message
    -- );

    -- check "R1.A. Witness antecedent of R1."
    -- not (
    --     out_msg.kind = automation_response and
    --     out_msg      = arv_future_out_msg
    -- );
tel;
