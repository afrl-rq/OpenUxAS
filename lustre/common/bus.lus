-- bus.lus

-- Simple representation of a bus for OpenUxAS.

include "types.lus"

--
-- Abstraction of a bus.
--
-- Note: not meant for implementation; only for environment modeling.
node bus(
    -- The message currently received by the system
    in_msg : message;
) returns (
    -- The message currently sent by the system
    out_msg : message;

    -- The ID to be used for future ID generation
    out_id : id_type;
);
let
    assert(
        -- The bus must send the message received; otherwise, it has a choice
        -- in this model.
        if in_msg <> no_message then
            -- the previously sent message (loop closure)
            out_msg = (no_message -> pre(in_msg)) and
            out_msg <> no_message and
            out_id  = out_msg.id
        else
            -- free choice: either no message or a new UAR with a valid ID.

            -- no message
            (out_msg = no_message and 
             out_id  = (0 -> pre(out_id)))

            or

            -- a Unique Automation Request with a valid id
            (out_msg.kind = unique_automation_response and 
             out_msg.id = out_id and
             out_id > (0 -> pre(out_id)))
    );
tel;
