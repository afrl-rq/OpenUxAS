# Boost anod spec
#
# Updating this spec:
# 1. Check for new versions at boost.org
# 2. Update the NAME and URL properties - make sure to update the release number
#    in the URL
# 3. run `anod reset` and `anod build boost` to make sure the spec still works
# 4. run `anod build uxas` and test the result by running examples

import os
from e3.fs import sync_tree
from e3.os.fs import unixpath
from e3.anod.loader import spec
from e3.anod.spec import Anod


class Boost(spec('common')):
    """Boost provides free peer-reviewed portable C++ source libraries."""

    NAME = "boost_1_74_0.tar.bz2"
    URL = f"https://boostorg.jfrog.io/artifactory/main/release/1.74.0/source/{NAME}"

    @property
    def build_deps(self):
        return [Anod.Dependency('compiler')]

    @property
    def build_source_list(self):
        return [Anod.Source(name=Boost.NAME,
                            publish=True)]

    @property
    def source_pkg_build(self):
        return [
            self.HTTPSSourceBuilder(
                name=Boost.NAME,
                url=Boost.URL)]

    @Anod.primitive()
    def build(self):
        bootstrap_args = [os.environ.get('SHELL', '/bin/bash'), './bootstrap.sh',
                          '--prefix=%s' % unixpath(self['INSTALL_DIR']),
                          '--without-icu',
                          '--with-libraries=filesystem,system,regex,date_time']
        self.shell(*bootstrap_args, cwd=self['SRC_DIR'])
        if self.env.build.os.name == 'darwin':
            toolset = 'darwin'
        else:
            toolset = 'gcc'
        self.shell(os.path.join(self['SRC_DIR'], 'b2'),
                   'link=static',
                   'toolset=%s' % toolset, 'cxxstd=11',
                   'install', cwd=self['SRC_DIR'])
        sync_tree(os.path.join(self['INSTALL_DIR'], 'lib'),
                  os.path.join(self['INSTALL_DIR'], 'lib64'), delete=True)
